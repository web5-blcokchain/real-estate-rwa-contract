/**
 * 统一部署入口
 * 支持所有网络的部署，替代原有的deploy.js和deploy-bsc-testnet.js
 */
require("dotenv").config();
const { ethers } = require("hardhat");
const fs = require("fs");
const path = require("path");
const { verifyEnv } = require("./utils/verify-env");
const { getLogger } = require("./utils/logging");
const config = require("./config/deploy-config");
const {
  deployUpgradeable,
  getContract,
  getRoles
} = require("./utils/deploy-utils");

// 在main函数开始处添加
const validateEnv = require("./utils/validate-env");

const logger = getLogger("deploy");

// 最大重试次数
const MAX_RETRIES = 3;
// 重试间隔（毫秒）
const RETRY_INTERVAL = 5000;

// 部署合约的辅助函数，包含重试逻辑
async function deployWithRetry(contractName, factory, deployFn, retries = 0) {
  try {
    console.log(`部署 ${contractName}... 尝试次数: ${retries + 1}`);
    return await deployFn();
  } catch (error) {
    if (retries < MAX_RETRIES) {
      console.log(`部署 ${contractName} 失败，将在 ${RETRY_INTERVAL/1000} 秒后重试...`);
      console.log(`错误: ${error.message}`);
      
      // 等待一段时间后重试
      await new Promise(resolve => setTimeout(resolve, RETRY_INTERVAL));
      return deployWithRetry(contractName, factory, deployFn, retries + 1);
    } else {
      console.error(`部署 ${contractName} 失败，已达到最大重试次数`);
      throw error;
    }
  }
}

// 监听部署进度的辅助函数
async function monitorDeploymentProgress(deployerContract) {
  console.log("开始监听部署进度...");
  
  // 定义部署步骤名称
  const stepNames = [
    "初始化", 
    "RoleManager", 
    "FeeManager", 
    "PropertyRegistry", 
    "RentDistributor",
    "TokenImplementation", 
    "TokenFactory", 
    "RedemptionManager", 
    "Marketplace", 
    "TokenHolderQuery", 
    "RealEstateSystem",
    "授予角色"
  ];
  
  // 设置事件过滤器
  const filter = deployerContract.filters.DeploymentProgress();
  
  // 监听事件
  deployerContract.on(filter, (step, contractName, contractAddress) => {
    console.log(`[${new Date().toISOString()}] 步骤 ${step}/${stepNames.length-1}: ${contractName} 部署完成 (${contractAddress})`);
    logger.info(`部署进度: ${step}/${stepNames.length-1} - ${contractName} 部署到 ${contractAddress}`);
    
    // 如果是最后一步，停止监听
    if (Number(step) === stepNames.length - 1) {
      console.log("所有合约部署完成！");
      deployerContract.removeAllListeners();
    }
  });
}

// 保存部署记录
function saveDeploymentRecord(contracts, chainId, networkName, deployer) {
  const timestamp = new Date().toISOString().replace(/:/g, '-');
  const deploymentPath = path.join(__dirname, "../deployments");
  
  if (!fs.existsSync(deploymentPath)) {
    fs.mkdirSync(deploymentPath, { recursive: true });
  }
  
  const contractNames = [
    "RealEstateSystem",
    "RoleManager",
    "FeeManager",
    "PropertyRegistry",
    "TokenFactory",
    "RedemptionManager",
    "RentDistributor",
    "Marketplace",
    "TokenHolderQuery"
  ];
  
  // 创建部署记录对象
  const contractAddresses = {};
  for (let i = 0; i < contractNames.length; i++) {
    contractAddresses[contractNames[i]] = contracts[i];
  }
  
  const deploymentData = {
    network: networkName,
    chainId: chainId,
    timestamp: timestamp,
    deployer: deployer,
    contracts: contractAddresses
  };
  
  // 保存部署记录
  const deploymentFile = path.join(deploymentPath, `${networkName}-${timestamp}.json`);
  fs.writeFileSync(
    deploymentFile,
    JSON.stringify(deploymentData, null, 2)
  );
  
  // 更新最新部署记录
  const latestDeploymentFile = path.join(deploymentPath, `${networkName}-latest.json`);
  fs.writeFileSync(
    latestDeploymentFile,
    JSON.stringify(deploymentData, null, 2)
  );
  
  logger.info(`部署记录已保存到: ${deploymentFile}`);
  console.log(`部署记录已保存到: ${deploymentFile}`);
}

async function main() {
  try {
    // 验证环境变量
    console.log("验证环境变量...");
    verifyEnv();
    console.log("环境变量验证通过");
    
    // 获取网络和部署者信息
    const [deployer] = await ethers.getSigners();
    const chainId = await deployer.getChainId();
    const network = await ethers.provider.getNetwork();
    const networkName = network.name !== 'unknown' ? network.name : `chain-${chainId}`;
    const balance = ethers.utils.formatEther(await deployer.getBalance());
    
    // 记录部署信息
    logger.info(`部署到网络: ${networkName} (chainId: ${chainId})`);
    logger.info(`部署账户: ${deployer.address}`);
    logger.info(`账户余额: ${balance}`);
    logger.info("========================================");
    logger.info(`开始部署到网络: ${networkName}`);
    logger.info(`时间: ${new Date().toISOString()}`);
    logger.info("========================================");
    
    // 检查余额是否足够
    if (parseFloat(balance) < 0.1) {
      logger.warn(`警告: 账户余额较低 (${balance} ETH), 可能无法完成部署`);
      console.warn(`警告: 账户余额较低 (${balance} ETH), 可能无法完成部署`);
    }
    
    // 部署SystemDeployer合约
    logger.info("部署 SystemDeployer...");
    console.log("开始部署 SystemDeployer...");
    
    const SystemDeployer = await ethers.getContractFactory("SystemDeployer");
    const deployerContractFn = () => SystemDeployer.deploy();
    const deployer_contract = await deployWithRetry("SystemDeployer", SystemDeployer, deployerContractFn);
    
    await deployer_contract.deployed();
    logger.info(`SystemDeployer部署成功: ${deployer_contract.address}`);
    console.log(`SystemDeployer部署成功: ${deployer_contract.address}`);
    
    // 设置部署进度监听
    await monitorDeploymentProgress(deployer_contract);
    
    // 使用SystemDeployer部署整个系统
    logger.info("开始部署整个系统...");
    console.log("开始部署整个系统...");
    
    // 获取gas价格并增加一点以加速交易
    const gasPrice = await ethers.provider.getGasPrice();
    const fastGasPrice = gasPrice.mul(110).div(100); // 增加10%
    
    const deploySystemOptions = {
      gasPrice: fastGasPrice,
      gasLimit: 15000000, // 设置较高的gas限制以确保交易不会失败
    };
    
    const tx = await deployer_contract.deploySystem(deploySystemOptions);
    console.log(`系统部署交易已提交: ${tx.hash}`);
    logger.info(`系统部署交易已提交: ${tx.hash}`);
    
    console.log("等待交易确认...");
    await tx.wait();
    
    console.log("系统部署完成");
    logger.info("系统部署完成");
    
    // 获取部署的合约地址
    const contracts = await deployer_contract.getDeployedContracts();
    logger.info("已部署的合约地址:");
    
    const contractNames = [
      "RealEstateSystem",
      "RoleManager",
      "FeeManager",
      "PropertyRegistry",
      "TokenFactory",
      "RedemptionManager",
      "RentDistributor",
      "Marketplace",
      "TokenHolderQuery"
    ];
    
    for (let i = 0; i < contractNames.length; i++) {
      logger.info(`${contractNames[i]}: ${contracts[i]}`);
      console.log(`${contractNames[i]}: ${contracts[i]}`);
    }
    
    // 保存部署记录
    saveDeploymentRecord(contracts, chainId, networkName, deployer.address);
    
    logger.info("部署完成!");
    console.log("部署完成!");
    
    // 停止事件监听
    deployer_contract.removeAllListeners();
    
  } catch (error) {
    logger.error(`部署失败: ${error.message}`);
    console.error(`部署过程中出错: ${error.message}`);
    console.error(error);
  }
}

function generateVerificationScript(networkName, contracts) {
  const verifyScriptPath = path.join(__dirname, `verify-${networkName}.js`);
  let verifyScript = `
const hre = require("hardhat");

async function main() {
  console.log("开始验证${networkName}合约...");
  
`;

  // 为每个合约生成验证代码
  for (const [contractName, address] of Object.entries(contracts)) {
    let constructorArgs = "[]";

    // 根据合约类型设置构造函数参数
    if (contractName === "PropertyRegistry") {
      constructorArgs = `["${contracts.RoleManager}"]`;
    } else if (contractName === "TokenFactory") {
      constructorArgs = `["${contracts.PropertyRegistry}"]`;
    } else if (contractName === "RedemptionManager") {
      constructorArgs = `["${contracts.PropertyRegistry}"]`;
    } else if (contractName === "RentDistributor" || contractName === "Marketplace" || contractName === "TokenHolderQuery") {
      constructorArgs = `["${contracts.TokenFactory}"]`;
    }

    verifyScript += `  // 验证${contractName}
  try {
    await hre.run("verify:verify", {
      address: "${address}",
      constructorArguments: ${constructorArgs}
    });
    console.log("${contractName} 验证成功");
  } catch (error) {
    console.error("${contractName} 验证失败:", error.message);
  }
  
`;
  }

  verifyScript += `  console.log("验证完成");
}

main()
  .then(() => process.exit(0))
  .catch((error) => {
    console.error(error);
    process.exit(1);
  });
`;

  fs.writeFileSync(verifyScriptPath, verifyScript);
  logger.info(`验证脚本已生成: ${verifyScriptPath}`);
}

// 如果直接运行此脚本
if (require.main === module) {
  main()
    .then(() => process.exit(0))
    .catch((error) => {
      console.error("部署过程中出错:", error);
      process.exit(1);
    });
} else {
  // 作为模块导出
  module.exports = { main };
}