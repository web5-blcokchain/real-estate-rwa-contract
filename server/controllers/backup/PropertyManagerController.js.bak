const { AddressUtils, Logger, EnvUtils } = require('../../../common');
const { ResponseUtils } = require('../../utils');
const BaseController = require('../BaseController');
const { ethers } = require('ethers');

/**
 * 房产管理控制器
 */
class PropertyManagerController extends BaseController {
    /**
     * 获取PropertyStatus枚举值
     * @param {number|string} status - 状态值
     * @returns {number} - 枚举值
     * @private
     */
    _getPropertyStatus(status) {
        // 确保status是一个有效的枚举值
        const statusMap = {
            0: 0, // Inactive
            1: 1, // Active
            2: 2, // ForSale
            3: 3, // Sold
            4: 4, // Rented
            5: 5  // Maintenance
        };
        
        // 将字符串转换为数字
        const statusNum = parseInt(status);
        
        // 检查状态值是否有效
        if (isNaN(statusNum) || statusMap[statusNum] === undefined) {
            throw new Error(`无效的房产状态值: ${status}`);
        }
        
        return statusMap[statusNum];
    }

    /**
     * 注册房产
     * @param {Object} req - 请求对象
     * @param {Object} res - 响应对象
     */
    async registerProperty(req, res) {
        const { propertyId, country, metadataURI } = req.body;
        
        console.log("\n[registerProperty] 开始执行");
        
        const contractAddress = EnvUtils.getContractAddress('PropertyManager');
        console.log("[registerProperty] 合约地址:", contractAddress);
        
        // 验证参数
        if (!this.validateRequired(res, { propertyId, country, metadataURI, contractAddress })) {
            return;
        }
        
        await this.handleContractAction(
            res,
            async () => {
                console.log("[registerProperty] 获取合约实例...");
                
                // 获取manager角色合约实例
                const contract = this.getContract('PropertyManager', 'manager');
                
                // 调用合约方法
                console.log("[registerProperty] 准备调用合约方法...");
                console.log("[registerProperty] 参数:", {
                    propertyId,
                    country,
                    metadataURI
                });
                
                const tx = await contract.registerProperty(propertyId, country, metadataURI);
                console.log("[registerProperty] 交易已发送:", tx.hash);
                
                // 等待交易确认
                console.log("[registerProperty] 等待交易确认...");
                const receipt = await this.waitForTransaction(tx);
                console.log("[registerProperty] 交易已确认:", receipt.hash);
                
                return {
                    transactionHash: receipt.hash,
                    propertyId,
                    country,
                    metadataURI
                };
            },
            '房产注册成功',
            { propertyId, country, metadataURI },
            '房产注册失败'
        );
    }

    /**
     * 获取房产信息
     * @param {Object} req - 请求对象
     * @param {Object} res - 响应对象
     */
    async getPropertyInfo(req, res) {
        const { propertyId } = req.query;
        
        console.log("\n[getPropertyInfo] 开始执行");
        
        const contractAddress = EnvUtils.getContractAddress('PropertyManager');
        console.log("[getPropertyInfo] 合约地址:", contractAddress);
        
        // 验证参数
        if (!this.validateRequired(res, { propertyId, contractAddress })) {
            return;
        }
        
        await this.handleContractAction(
            res,
            async () => {
                console.log("[getPropertyInfo] 获取合约实例...");
                
                // 获取admin角色合约实例
                const contract = this.getContract('PropertyManager', 'admin');
                
                // 调用合约方法
                console.log("[getPropertyInfo] 准备调用合约方法...");
                console.log("[getPropertyInfo] 参数:", {
                    propertyId
                });
                
                const propertyInfo = await contract.getPropertyInfo(propertyId);
                console.log("[getPropertyInfo] 获取到的房产信息:", propertyInfo);
                
                return {
                    propertyId,
                    country: propertyInfo.country,
                    metadataURI: propertyInfo.metadataURI,
                    status: propertyInfo.status,
                    owner: propertyInfo.owner,
                    tokenAddress: propertyInfo.tokenAddress
                };
            },
            '获取房产信息成功',
            null,
            '获取房产信息失败'
        );
    }

    /**
     * 更新房产状态
     * @param {Object} req - 请求对象
     * @param {Object} res - 响应对象
     */
    async updatePropertyStatus(req, res) {
        const { propertyId, status } = req.body;
        
        console.log("\n[updatePropertyStatus] 开始执行");
        
        const contractAddress = EnvUtils.getContractAddress('PropertyManager');
        console.log("[updatePropertyStatus] 合约地址:", contractAddress);
        
        // 验证参数
        if (!this.validateRequired(res, { propertyId, status, contractAddress })) {
            return;
        }
        
        // 验证状态值
        try {
            const propertyStatus = this._getPropertyStatus(status);
            console.log("[updatePropertyStatus] 转换后的状态值:", propertyStatus);
            
            await this.handleContractAction(
                res,
                async () => {
                    console.log("[updatePropertyStatus] 获取合约实例...");
                    
                    // 获取manager角色合约实例
                    const contract = this.getContract('PropertyManager', 'manager');
                    
                    // 调用合约方法
                    console.log("[updatePropertyStatus] 准备调用合约方法...");
                    console.log("[updatePropertyStatus] 参数:", {
                        propertyId,
                        status: propertyStatus
                    });
                    
                    const tx = await contract.updatePropertyStatus(propertyId, propertyStatus);
                    console.log("[updatePropertyStatus] 交易已发送:", tx.hash);
                    
                    // 等待交易确认
                    console.log("[updatePropertyStatus] 等待交易确认...");
                    const receipt = await this.waitForTransaction(tx);
                    console.log("[updatePropertyStatus] 交易已确认:", receipt.hash);
                    
                    return {
                        transactionHash: receipt.hash,
                        propertyId,
                        status: propertyStatus
                    };
                },
                '房产状态更新成功',
                { propertyId, status: propertyStatus },
                '房产状态更新失败'
            );
        } catch (error) {
            return ResponseUtils.sendError(res, `无效的房产状态值: ${status}`, 400);
        }
    }

    /**
     * 转移房产所有权
     * @param {Object} req - 请求对象
     * @param {Object} res - 响应对象
     */
    async transferPropertyOwnership(req, res) {
        const { propertyId, newOwner } = req.body;
        
        console.log("\n[transferPropertyOwnership] 开始执行");
        
        const contractAddress = EnvUtils.getContractAddress('PropertyManager');
        console.log("[transferPropertyOwnership] 合约地址:", contractAddress);
        
        // 验证参数
        if (!this.validateRequired(res, { propertyId, newOwner, contractAddress })) {
            return;
        }
        
        // 验证地址格式
        if (!AddressUtils.isValid(newOwner)) {
            return ResponseUtils.sendError(res, '无效的新所有者地址格式', 400);
        }
        
        await this.handleContractAction(
            res,
            async () => {
                console.log("[transferPropertyOwnership] 获取合约实例...");
                
                // 获取manager角色合约实例
                const contract = this.getContract('PropertyManager', 'manager');
                
                // 调用合约方法
                console.log("[transferPropertyOwnership] 准备调用合约方法...");
                console.log("[transferPropertyOwnership] 参数:", {
                    propertyId,
                    newOwner
                });
                
                const tx = await contract.transferPropertyOwnership(propertyId, newOwner);
                console.log("[transferPropertyOwnership] 交易已发送:", tx.hash);
                
                // 等待交易确认
                console.log("[transferPropertyOwnership] 等待交易确认...");
                const receipt = await this.waitForTransaction(tx);
                console.log("[transferPropertyOwnership] 交易已确认:", receipt.hash);
                
                return {
                    transactionHash: receipt.hash,
                    propertyId,
                    newOwner
                };
            },
            '房产所有权转移成功',
            { propertyId, newOwner },
            '房产所有权转移失败'
        );
    }

    /**
     * 获取房产代币地址
     * @param {Object} req - 请求对象
     * @param {Object} res - 响应对象
     */
    async getPropertyToken(req, res) {
        const { propertyId } = req.query;
        
        console.log("\n[getPropertyToken] 开始执行");
        
        const contractAddress = EnvUtils.getContractAddress('PropertyManager');
        console.log("[getPropertyToken] 合约地址:", contractAddress);
        
        // 验证参数
        if (!this.validateRequired(res, { propertyId, contractAddress })) {
            return;
        }
        
        await this.handleContractAction(
            res,
            async () => {
                console.log("[getPropertyToken] 获取合约实例...");
                
                // 获取admin角色合约实例
                const contract = this.getContract('PropertyManager', 'admin');
                
                // 调用合约方法
                console.log("[getPropertyToken] 准备调用合约方法...");
                console.log("[getPropertyToken] 参数:", {
                    propertyId
                });
                
                const tokenAddress = await contract.getPropertyToken(propertyId);
                console.log("[getPropertyToken] 获取到的代币地址:", tokenAddress);
                
                return {
                    propertyId,
                    tokenAddress
                };
            },
            '获取房产代币地址成功',
            null,
            '获取房产代币地址失败'
        );
    }

    /**
     * 获取房产所有者
     * @param {Object} req - 请求对象
     * @param {Object} res - 响应对象
     */
    async getPropertyOwner(req, res) {
        const { propertyId } = req.query;
        
        console.log("\n[getPropertyOwner] 开始执行");
        
        const contractAddress = EnvUtils.getContractAddress('PropertyManager');
        console.log("[getPropertyOwner] 合约地址:", contractAddress);
        
        // 验证参数
        if (!this.validateRequired(res, { propertyId, contractAddress })) {
            return;
        }
        
        await this.handleContractAction(
            res,
            async () => {
                console.log("[getPropertyOwner] 获取合约实例...");
                
                // 获取admin角色合约实例
                const contract = this.getContract('PropertyManager', 'admin');
                
                // 调用合约方法
                console.log("[getPropertyOwner] 准备调用合约方法...");
                console.log("[getPropertyOwner] 参数:", {
                    propertyId
                });
                
                const owner = await contract.getPropertyOwner(propertyId);
                console.log("[getPropertyOwner] 获取到的所有者地址:", owner);
                
                return {
                    propertyId,
                    owner
                };
            },
            '获取房产所有者成功',
            null,
            '获取房产所有者失败'
        );
    }

    /**
     * 获取房产列表（分页）
     * @param {Object} req - 请求对象
     * @param {Object} res - 响应对象
     */
    async getProperties(req, res) {
        const { offset = 0, limit = 10, status } = req.query;
        
        console.log("\n[getProperties] 开始执行");
        
        const contractAddress = EnvUtils.getContractAddress('PropertyManager');
        console.log("[getProperties] 合约地址:", contractAddress);
        
        // 验证参数
        if (!this.validateRequired(res, { contractAddress })) {
            return;
        }
        
        // 验证分页参数
        const offsetNum = parseInt(offset);
        const limitNum = parseInt(limit);
        if (isNaN(offsetNum) || isNaN(limitNum) || offsetNum < 0 || limitNum <= 0 || limitNum > 100) {
            return ResponseUtils.sendError(res, '无效的分页参数', 400);
        }
        
        await this.handleContractAction(
            res,
            async () => {
                console.log("[getProperties] 获取合约实例...");
                
                // 获取admin角色合约实例
                const contract = this.getContract('PropertyManager', 'admin');
                
                // 调用合约方法
                console.log("[getProperties] 准备调用合约方法...");
                console.log("[getProperties] 参数:", {
                    offset: offsetNum,
                    limit: limitNum,
                    status: status ? parseInt(status) : undefined
                });
                
                const properties = await contract.getProperties(offsetNum, limitNum, status ? parseInt(status) : undefined);
                console.log("[getProperties] 获取到的房产列表:", properties);
                
                return {
                    properties,
                    pagination: {
                        offset: offsetNum,
                        limit: limitNum,
                        total: properties.length
                    }
                };
            },
            '获取房产列表成功',
            null,
            '获取房产列表失败'
        );
    }

    /**
     * 获取指定所有者的房产列表
     * @param {Object} req - 请求对象
     * @param {Object} res - 响应对象
     */
    async getOwnerProperties(req, res) {
        const { owner } = req.params;
        
        console.log("\n[getOwnerProperties] 开始执行");
        
        const contractAddress = EnvUtils.getContractAddress('PropertyManager');
        console.log("[getOwnerProperties] 合约地址:", contractAddress);
        
        // 验证参数
        if (!this.validateRequired(res, { owner, contractAddress })) {
            return;
        }
        
        // 验证地址格式
        if (!AddressUtils.isValid(owner)) {
            return ResponseUtils.sendError(res, '无效的所有者地址格式', 400);
        }
        
        await this.handleContractAction(
            res,
            async () => {
                console.log("[getOwnerProperties] 获取合约实例...");
                
                // 获取admin角色合约实例
                const contract = this.getContract('PropertyManager', 'admin');
                
                // 调用合约方法
                console.log("[getOwnerProperties] 准备调用合约方法...");
                console.log("[getOwnerProperties] 参数:", {
                    owner
                });
                
                const properties = await contract.getOwnerProperties(owner);
                console.log("[getOwnerProperties] 获取到的房产列表:", properties);
                
                return {
                    owner,
                    properties
                };
            },
            '获取所有者房产列表成功',
            null,
            '获取所有者房产列表失败'
        );
    }

    /**
     * 设置房产代币地址
     * @param {Object} req - 请求对象
     * @param {Object} res - 响应对象
     */
    async setPropertyToken(req, res) {
        const { propertyId, tokenAddress } = req.body;
        
        console.log("\n[setPropertyToken] 开始执行");
        
        const contractAddress = EnvUtils.getContractAddress('PropertyManager');
        console.log("[setPropertyToken] 合约地址:", contractAddress);
        
        // 验证参数
        if (!this.validateRequired(res, { propertyId, tokenAddress, contractAddress })) {
            return;
        }
        
        // 验证地址格式
        if (!AddressUtils.isValid(tokenAddress)) {
            return ResponseUtils.sendError(res, '无效的代币地址格式', 400);
        }
        
        await this.handleContractAction(
            res,
            async () => {
                console.log("[setPropertyToken] 获取合约实例...");
                
                // 获取manager角色合约实例
                const contract = this.getContract('PropertyManager', 'manager');
                
                // 调用合约方法
                console.log("[setPropertyToken] 准备调用合约方法...");
                console.log("[setPropertyToken] 参数:", {
                    propertyId,
                    tokenAddress
                });
                
                const tx = await contract.setPropertyToken(propertyId, tokenAddress);
                console.log("[setPropertyToken] 交易已发送:", tx.hash);
                
                // 等待交易确认
                console.log("[setPropertyToken] 等待交易确认...");
                const receipt = await this.waitForTransaction(tx);
                console.log("[setPropertyToken] 交易已确认:", receipt.hash);
                
                return {
                    transactionHash: receipt.hash,
                    propertyId,
                    tokenAddress
                };
            },
            '设置房产代币地址成功',
            { propertyId, tokenAddress },
            '设置房产代币地址失败'
        );
    }
}

module.exports = PropertyManagerController; 