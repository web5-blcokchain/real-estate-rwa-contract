/**
 * @fileoverview 环境配置模块
 * 提供对环境变量的统一访问和管理
 * @module config/EnvConfig
 */

const dotenv = require('dotenv');
const path = require('path');
const fs = require('fs');

// 尝试加载环境变量
let envLoaded = false;
try {
  // 首先尝试从工作目录加载.env文件
  const result = dotenv.config();
  if (result.error) {
    // 如果失败，尝试从项目根目录加载
    const rootEnvPath = path.resolve(process.cwd(), '../../../.env');
    if (fs.existsSync(rootEnvPath)) {
      dotenv.config({ path: rootEnvPath });
      envLoaded = true;
    }
  } else {
    envLoaded = true;
  }
} catch (error) {
  console.warn('加载.env文件失败:', error.message);
}

/**
 * 获取环境变量
 * @param {string} key - 环境变量名
 * @param {*} defaultValue - 默认值
 * @returns {string} 环境变量值
 */
function get(key, defaultValue = '') {
  return process.env[key] || defaultValue;
}

/**
 * 获取数字类型环境变量
 * @param {string} key - 环境变量名
 * @param {number} defaultValue - 默认值
 * @returns {number} 环境变量值
 */
function getNumber(key, defaultValue = 0) {
  const value = get(key, String(defaultValue));
  return Number(value);
}

/**
 * 获取布尔类型环境变量
 * @param {string} key - 环境变量名
 * @param {boolean} defaultValue - 默认值
 * @returns {boolean} 环境变量值
 */
function getBoolean(key, defaultValue = false) {
  const value = get(key, String(defaultValue));
  return value.toLowerCase() === 'true';
}

/**
 * 获取数组类型环境变量
 * @param {string} key - 环境变量名
 * @param {string} delimiter - 分隔符
 * @param {Array} defaultValue - 默认值
 * @returns {Array} 环境变量值
 */
function getArray(key, delimiter = ',', defaultValue = []) {
  const value = get(key);
  if (!value) return defaultValue;
  return value.split(delimiter).map(item => item.trim());
}

/**
 * 获取对象类型环境变量
 * @param {string} key - 环境变量名
 * @param {Object} defaultValue - 默认值
 * @returns {Object} 环境变量值
 */
function getObject(key, defaultValue = {}) {
  const value = get(key);
  if (!value) return defaultValue;
  try {
    return JSON.parse(value);
  } catch (error) {
    console.warn(`无法解析环境变量 ${key} 为JSON对象:`, error.message);
    return defaultValue;
  }
}

/**
 * 获取区块链网络配置
 * @returns {Object} 区块链网络配置
 */
function getBlockchainConfig() {
  return {
    networkType: get('BLOCKCHAIN_NETWORK', 'development'),
    rpcUrl: get('BLOCKCHAIN_RPC_URL', 'http://localhost:8545'),
    wsUrl: get('BLOCKCHAIN_WS_URL', 'ws://localhost:8545'),
    chainId: getNumber('BLOCKCHAIN_CHAIN_ID', 1),
    gasLimit: getNumber('BLOCKCHAIN_GAS_LIMIT', 8000000),
    gasPrice: get('BLOCKCHAIN_GAS_PRICE', 'auto'),
    confirmations: getNumber('BLOCKCHAIN_CONFIRMATIONS', 1),
    timeoutBlocks: getNumber('BLOCKCHAIN_TIMEOUT_BLOCKS', 50),
    skipDryRun: getBoolean('BLOCKCHAIN_SKIP_DRY_RUN', false)
  };
}

/**
 * 获取日志配置
 * @returns {Object} 日志配置
 */
function getLogConfig() {
  return {
    level: get('LOG_LEVEL', 'info'),
    format: get('LOG_FORMAT', 'json'),
    directory: get('LOG_DIRECTORY', './logs'),
    filename: get('LOG_FILENAME', 'app-%DATE%.log'),
    maxSize: get('LOG_MAX_SIZE', '20m'),
    maxFiles: getNumber('LOG_MAX_FILES', 14),
    console: getBoolean('LOG_CONSOLE', true),
    timestamp: getBoolean('LOG_TIMESTAMP', true)
  };
}

/**
 * 获取服务器配置
 * @returns {Object} 服务器配置
 */
function getServerConfig() {
  return {
    port: getNumber('SERVER_PORT', 3000),
    host: get('SERVER_HOST', 'localhost'),
    apiRoot: get('API_ROOT', '/api/v1'),
    apiDocs: get('API_DOCS', '/api-docs'),
    cors: getBoolean('CORS_ENABLED', true),
    corsOrigin: get('CORS_ORIGIN', '*'),
    timeout: getNumber('REQUEST_TIMEOUT', 30000),
    bodyLimit: get('BODY_LIMIT', '1mb'),
    trustProxy: getBoolean('TRUST_PROXY', false)
  };
}

// 导出配置函数
module.exports = {
  isLoaded: envLoaded,
  get,
  getNumber,
  getBoolean,
  getArray,
  getObject,
  getBlockchainConfig,
  getLogConfig,
  getServerConfig
}; 